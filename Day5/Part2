# import pyparsing as pp
# day 5 part 1
import math

file = "C:\\Users\\elisa.pevere\\Documents\\EPrograms\\advcode\\day5Long.txt"


# I should've started this the day it started


def main(line):
    print("hm")


def findSeeds(file):
    with open(file) as f:
        first_line = f.readline().strip('\n')
    x = first_line.split(": ")
    x.pop(0)
    newx = x
    newx = x[0].split(" ")
    rangeMap = {}
    startNum = 0
    for i in range(len(newx)):
        if i % 2 != 0:

            endNum = math.ceil(int(newx[i])/2)
            secondStartNum = startNum + endNum + 1
            rangeMap[startNum] = startNum + endNum
            rangeMap[secondStartNum] = secondStartNum + endNum -1

        startNum = int(newx[i])

    return rangeMap


def split(a, c, b, d):
    print("splitting")
    discreteRangeMap = {}
    if a < c:
        discreteRangeMap[a] = c
        discreteRangeMap[c+1] = b
    elif b > d:
        discreteRangeMap[a] = d
        discreteRangeMap[d + 1] = b
    elif a < c and b > d:
        print("nah")

    return discreteRangeMap


if __name__ == '__main__':
    print("Reading File")
    txtFile = open(file, "r")
    rangeMap = findSeeds(file)
    foundMap = {}
    toBeAddedRanges = {}
    todelete = []

    for num in rangeMap:
        foundMap[num] = "False"

    for lines in txtFile:
        if "seeds: " not in lines:
                #print(lines)
                mapArr = lines.split(" ")

                if 'map:\n' in mapArr:
                    #print(lines)
                    for num in rangeMap:
                        if not foundMap[num] == "Delete":
                            foundMap[num] = "False"
                    #print(rangeMap)
                elif '\n' not in mapArr:
                    for firstNum in rangeMap:
                        # all range nums are within the map range
                        #if not foundMap[firstNum]:
                        if foundMap[firstNum] == "False" and firstNum >= int(mapArr[1]) and rangeMap[firstNum] <= (int(mapArr[2])+int(mapArr[1])):

                            equivMapNum = int(mapArr[0])-int(mapArr[1])

                            newNum = firstNum + equivMapNum
                            diffNum = rangeMap[firstNum] - firstNum
                            foundMap[newNum] = "True"
                            rangeMap[newNum] = newNum + diffNum
                            del rangeMap[firstNum]
                            del foundMap[firstNum]
                        # first range is before soil source range but second range is before soil source end rage
                        elif foundMap[firstNum] == "False" and firstNum < (int(mapArr[2]) + int(mapArr[1])) and rangeMap[firstNum] > int(mapArr[1]):
                            newSplit = split(firstNum, int(mapArr[1]), rangeMap[firstNum], int(mapArr[2]) + int(mapArr[1]))
                            for newNum in newSplit:
                                toBeAddedRanges[newNum] = newSplit[newNum]
                            foundMap[firstNum] = "Delete"

                        elif foundMap[firstNum] == "False" and firstNum > (int(mapArr[2]) + int(mapArr[1])) or int(rangeMap[firstNum]) < int(mapArr[1]):
                            print("left alone")

                #for firstNum in foundMap:
                #    if foundMap[firstNum] == "Delete":
                #        del rangeMap[firstNum]
                #        todelete.append(firstNum)
                #for firstNum in todelete:
                #    if foundMap[firstNum] == "Delete":
                #        del foundMap[firstNum]

                for newNum in toBeAddedRanges:
                    rangeMap[newNum] = toBeAddedRanges[newNum]
                    foundMap[newNum] = "True"
                toBeAddedRanges = {}



                            # if second part bigger than comparison then split?
    arrSort = []
    for firstNum in rangeMap:
        if not foundMap[firstNum] == "Delete":
            arrSort.append(firstNum)
            


    arrSort.sort()
    print("lowestNum = " + str(arrSort[0]))
    print(arrSort)
        #print(foundMap)
                #print(mapArr)
        #lineNum += 1
    #seedsList.sort()
    #print(seedsList)
    #print(rangeMap)
# 2928126749
# 203300829 too high - digits
# 287563431
#114724570 wrong
#191448703 wrong
#139204685 wrong
# 84821304
